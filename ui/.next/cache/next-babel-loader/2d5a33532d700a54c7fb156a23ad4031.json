{"ast":null,"code":"import { RegexPattern } from 'constants/RegexPattern'; // - Import actions\n\nconst isValidEmail = email => {\n  let re = RegexPattern.ValidEmail;\n  return re.test(email);\n};\n\nconst createServerRequestId = (requestType, uniqueId) => {\n  return `${requestType}:${uniqueId}`;\n};\n\nfunction queryString(name, url = window.location.href) {\n  name = name.replace(/[[]]/g, '\\\\$&');\n  const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)', 'i');\n  const results = regex.exec(url);\n\n  if (!results) {\n    return null;\n  }\n\n  if (!results[2]) {\n    return '';\n  }\n\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n/**\r\n * Validate URL\r\n */\n\n\nconst validateUrl = url => {\n  return RegexPattern.ValidateURL.test(url);\n};\n/**\r\n * Get youtube code from youtube URL\r\n */\n\n\nconst getYoutubeCodeUrl = url => {\n  var match = url.match(RegexPattern.YoutubUrlCode);\n  return match && match[7].length === 11 ? match[7] : false;\n};\n/**\r\n * Get youtube image thumbnails\r\n */\n\n\nconst getYoutubetThumbnails = url => {\n  return `//img.youtube.com/vi/${getYoutubeCodeUrl(url)}/0.jpg`;\n};\n/**\r\n * Validate youtube URL\r\n */\n\n\nconst validateYoutubeUrl = url => {\n  const match = url.match(RegexPattern.ValidYoutubeURL);\n  return match && match[2].length === 11;\n};\n/**\r\n * Whether string is empty\r\n */\n\n\nconst isEmpty = input => {\n  return !input || /^\\s*$/.test(input) || input.length === 0 || !input.trim();\n};\n\nconst getNumberOfLines = input => {\n  return input.split('\\n').length;\n};\n\nexport default {\n  isValidEmail,\n  queryString,\n  createServerRequestId,\n  getYoutubeCodeUrl,\n  getYoutubetThumbnails,\n  validateYoutubeUrl,\n  validateUrl,\n  getNumberOfLines,\n  isEmpty\n};","map":{"version":3,"sources":["G:/wamp64/www/react-social-network/ui/src/api/StringAPI.ts"],"names":["RegexPattern","isValidEmail","email","re","ValidEmail","test","createServerRequestId","requestType","uniqueId","queryString","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","validateUrl","ValidateURL","getYoutubeCodeUrl","match","YoutubUrlCode","length","getYoutubetThumbnails","validateYoutubeUrl","ValidYoutubeURL","isEmpty","input","trim","getNumberOfLines","split"],"mappings":"AACA,SAASA,YAAT,QAA6B,wBAA7B,C,CAEA;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAmB;AACtC,MAAIC,EAAE,GAAGH,YAAY,CAACI,UAAtB;AACA,SAAOD,EAAE,CAACE,IAAH,CAAQH,KAAR,CAAP;AACD,CAHD;;AAKA,MAAMI,qBAAqB,GAAG,CAACC,WAAD,EAAiCC,QAAjC,KAAsD;AAClF,SAAQ,GAAED,WAAY,IAAGC,QAAS,EAAlC;AACD,CAFD;;AAIA,SAASC,WAAT,CAAsBC,IAAtB,EAAoCC,GAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAlE,EAAwE;AACtEJ,EAAAA,IAAI,GAAGA,IAAI,CAACK,OAAL,CAAa,OAAb,EAAsB,MAAtB,CAAP;AAEA,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAW,SAASP,IAAT,GAAgB,mBAA3B,EAAgD,GAAhD,CAAd;AACA,QAAMQ,OAAO,GAAGF,KAAK,CAACG,IAAN,CAAWR,GAAX,CAAhB;;AAEA,MAAI,CAACO,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,MAAI,CAACA,OAAO,CAAC,CAAD,CAAZ,EAAiB;AACf,WAAO,EAAP;AACD;;AAED,SAAOE,kBAAkB,CAACF,OAAO,CAAC,CAAD,CAAP,CAAWH,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAD,CAAzB;AACD;AAED;;;;;AAGA,MAAMM,WAAW,GAAIV,GAAD,IAAiB;AACnC,SAAOX,YAAY,CAACsB,WAAb,CAAyBjB,IAAzB,CAA8BM,GAA9B,CAAP;AACD,CAFD;AAIA;;;;;AAGA,MAAMY,iBAAiB,GAAIZ,GAAD,IAAiB;AACzC,MAAIa,KAAK,GAAGb,GAAG,CAACa,KAAJ,CAAUxB,YAAY,CAACyB,aAAvB,CAAZ;AACE,SAAQD,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,KAAoB,EAA9B,GAAoCF,KAAK,CAAC,CAAD,CAAzC,GAA+C,KAAtD;AACH,CAHD;AAKA;;;;;AAGA,MAAMG,qBAAqB,GAAIhB,GAAD,IAAiB;AAC7C,SAAQ,wBAAuBY,iBAAiB,CAACZ,GAAD,CAAM,QAAtD;AACD,CAFD;AAIA;;;;;AAGA,MAAMiB,kBAAkB,GAAIjB,GAAD,IAAiB;AAC1C,QAAMa,KAAK,GAAIb,GAAG,CAACa,KAAJ,CAAUxB,YAAY,CAAC6B,eAAvB,CAAf;AACA,SAAOL,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASE,MAAT,KAAoB,EAApC;AACD,CAHD;AAKA;;;;;AAGA,MAAMI,OAAO,GAAIC,KAAD,IAAoB;AAClC,SAAQ,CAACA,KAAD,IAAU,QAAQ1B,IAAR,CAAa0B,KAAb,CAAX,IAAoCA,KAAK,CAACL,MAAN,KAAiB,CAAjB,IAAsB,CAACK,KAAK,CAACC,IAAN,EAAlE;AACD,CAFD;;AAIA,MAAMC,gBAAgB,GAAIF,KAAD,IAAmB;AAC1C,SAAOA,KAAK,CAACG,KAAN,CAAY,IAAZ,EAAkBR,MAAzB;AACD,CAFD;;AAIA,eAAe;AACbzB,EAAAA,YADa;AAEbQ,EAAAA,WAFa;AAGbH,EAAAA,qBAHa;AAIbiB,EAAAA,iBAJa;AAKbI,EAAAA,qBALa;AAMbC,EAAAA,kBANa;AAObP,EAAAA,WAPa;AAQbY,EAAAA,gBARa;AASbH,EAAAA;AATa,CAAf","sourcesContent":["import { ServerRequestType } from 'constants/serverRequestType'\r\nimport { RegexPattern } from 'constants/RegexPattern'\r\n\r\n// - Import actions\r\n\r\nconst isValidEmail = (email: string) => {\r\n  let re = RegexPattern.ValidEmail\r\n  return re.test(email)\r\n}\r\n\r\nconst createServerRequestId = (requestType: ServerRequestType, uniqueId: string) => {\r\n  return `${requestType}:${uniqueId}`\r\n}\r\n\r\nfunction queryString (name: string, url: string = window.location.href) {\r\n  name = name.replace(/[[]]/g, '\\\\$&')\r\n\r\n  const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)', 'i')\r\n  const results = regex.exec(url)\r\n\r\n  if (!results) {\r\n    return null\r\n  }\r\n  if (!results[2]) {\r\n    return ''\r\n  }\r\n\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\r\n}\r\n\r\n/**\r\n * Validate URL\r\n */\r\nconst validateUrl = (url: string) => {\r\n  return RegexPattern.ValidateURL.test(url)\r\n}\r\n\r\n/**\r\n * Get youtube code from youtube URL\r\n */\r\nconst getYoutubeCodeUrl = (url: string) => {\r\n  var match = url.match(RegexPattern.YoutubUrlCode)\r\n    return (match && match[7].length === 11) ? match[7] : false\r\n}\r\n\r\n/**\r\n * Get youtube image thumbnails\r\n */\r\nconst getYoutubetThumbnails = (url: string) => {\r\n  return `//img.youtube.com/vi/${getYoutubeCodeUrl(url)}/0.jpg`\r\n}\r\n\r\n/**\r\n * Validate youtube URL\r\n */\r\nconst validateYoutubeUrl = (url: string) => {\r\n  const match =  url.match(RegexPattern.ValidYoutubeURL)\r\n  return match && match[2].length === 11\r\n}\r\n\r\n/**\r\n * Whether string is empty\r\n */\r\nconst isEmpty = (input?: string) => {\r\n  return (!input || /^\\s*$/.test(input)) || (input.length === 0 || !input.trim())\r\n}\r\n\r\nconst getNumberOfLines = (input: string) => {\r\n  return input.split('\\n').length\r\n}\r\n\r\nexport default {\r\n  isValidEmail,\r\n  queryString,\r\n  createServerRequestId,\r\n  getYoutubeCodeUrl,\r\n  getYoutubetThumbnails,\r\n  validateYoutubeUrl,\r\n  validateUrl,\r\n  getNumberOfLines,\r\n  isEmpty\r\n}\r\n"]},"metadata":{},"sourceType":"module"}