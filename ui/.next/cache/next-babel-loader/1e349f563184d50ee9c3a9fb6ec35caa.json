{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _url = require(\"url\");\n\nvar _mitt = _interopRequireDefault(require(\"../next-server/lib/mitt\"));\n\nvar _isDynamic = require(\"./../next-server/lib/router/utils/is-dynamic\");\n\nvar _routeMatcher = require(\"./../next-server/lib/router/utils/route-matcher\");\n\nvar _routeRegex = require(\"./../next-server/lib/router/utils/route-regex\");\n\nvar _router = require(\"./../next-server/lib/router/router\");\n\nfunction hasRel(rel, link) {\n  try {\n    link = document.createElement('link');\n    return link.relList.supports(rel);\n  } catch (_unused) {}\n}\n\nconst relPrefetch = hasRel('preload') && !hasRel('prefetch') ? // https://caniuse.com/#feat=link-rel-preload\n// macOS and iOS (Safari does not support prefetch)\n'preload' : // https://caniuse.com/#feat=link-rel-prefetch\n// IE 11, Edge 12+, nearly all evergreen\n'prefetch';\nconst hasNoModule = ('noModule' in document.createElement('script'));\n/** @param {string} route */\n\nfunction normalizeRoute(route) {\n  if (route[0] !== '/') {\n    throw new Error(\"Route name should start with a \\\"/\\\", got \\\"\".concat(route, \"\\\"\"));\n  }\n\n  route = route.replace(/\\/index$/, '/');\n  if (route === '/') return route;\n  return route.replace(/\\/$/, '');\n}\n\nfunction appendLink(href, rel, as) {\n  return new Promise((res, rej, link) => {\n    link = document.createElement('link');\n    link.crossOrigin = process.crossOrigin;\n    link.href = href;\n    link.rel = rel;\n    if (as) link.as = as;\n    link.onload = res;\n    link.onerror = rej;\n    document.head.appendChild(link);\n  });\n}\n\nclass PageLoader {\n  constructor(buildId, assetPrefix) {\n    this.buildId = buildId;\n    this.assetPrefix = assetPrefix;\n    this.pageCache = {};\n    this.pageRegisterEvents = (0, _mitt.default)();\n    this.loadingRoutes = {};\n\n    if (process.env.__NEXT_GRANULAR_CHUNKS) {\n      this.promisedBuildManifest = new Promise(resolve => {\n        if (window.__BUILD_MANIFEST) {\n          resolve(window.__BUILD_MANIFEST);\n        } else {\n          window.__BUILD_MANIFEST_CB = () => {\n            resolve(window.__BUILD_MANIFEST);\n          };\n        }\n      });\n    }\n    /** @type {Promise<Set<string>>} */\n\n\n    this.promisedSsgManifest = new Promise(resolve => {\n      if (window.__SSG_MANIFEST) {\n        resolve(window.__SSG_MANIFEST);\n      } else {\n        window.__SSG_MANIFEST_CB = () => {\n          resolve(window.__SSG_MANIFEST);\n        };\n      }\n    });\n  } // Returns a promise for the dependencies for a particular route\n\n\n  getDependencies(route) {\n    return this.promisedBuildManifest.then(man => man[route] && man[route].map(url => \"\".concat(this.assetPrefix, \"/_next/\").concat(encodeURI(url))) || []);\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n  */\n\n\n  getDataHref(href, asPath) {\n    const getHrefForSlug =\n    /** @type string */\n    path => {\n      path = (0, _router.delBasePath)(path);\n      return \"\".concat(this.assetPrefix, \"/_next/data/\").concat(this.buildId).concat(path === '/' ? '/index' : path, \".json\");\n    };\n\n    const _ref = (0, _url.parse)(href, true),\n          hrefPathname = _ref.pathname,\n          query = _ref.query;\n\n    const _ref2 = (0, _url.parse)(asPath),\n          asPathname = _ref2.pathname;\n\n    const route = normalizeRoute(hrefPathname);\n    let isDynamic = (0, _isDynamic.isDynamicRoute)(route),\n        interpolatedRoute;\n\n    if (isDynamic) {\n      const dynamicRegex = (0, _routeRegex.getRouteRegex)(route);\n      const dynamicGroups = dynamicRegex.groups;\n      const dynamicMatches = // Try to match the dynamic route against the asPath\n      (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) || // Fall back to reading the values from the href\n      // TODO: should this take priority; also need to change in the router.\n      query;\n      interpolatedRoute = route;\n\n      if (!Object.keys(dynamicGroups).every(param => {\n        let value = dynamicMatches[param];\n        const repeat = dynamicGroups[param].repeat; // support single-level catch-all\n        // TODO: more robust handling for user-error (passing `/`)\n\n        if (repeat && !Array.isArray(value)) value = [value];\n        return param in dynamicMatches && ( // Interpolate group into data URL if present\n        interpolatedRoute = interpolatedRoute.replace(\"[\".concat(repeat ? '...' : '').concat(param, \"]\"), repeat ? value.map(encodeURIComponent).join('/') : encodeURIComponent(value)));\n      })) {\n        interpolatedRoute = ''; // did not satisfy all requirements\n        // n.b. We ignore this error because we handle warning for this case in\n        // development in the `<Link>` component directly.\n      }\n    }\n\n    return isDynamic ? interpolatedRoute && getHrefForSlug(interpolatedRoute) : getHrefForSlug(route);\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n  */\n\n\n  prefetchData(href, asPath) {\n    const _ref3 = (0, _url.parse)(href, true),\n          hrefPathname = _ref3.pathname;\n\n    const route = normalizeRoute(hrefPathname);\n    return this.promisedSsgManifest.then((s, _dataHref) => // Check if the route requires a data file\n    s.has(route) && ( // Try to generate data href, noop when falsy\n    _dataHref = this.getDataHref(href, asPath)) && // noop when data has already been prefetched (dedupe)\n    !document.querySelector(\"link[rel=\\\"\".concat(relPrefetch, \"\\\"][href^=\\\"\").concat(_dataHref, \"\\\"]\")) && // Inject the `<link rel=prefetch>` tag for above computed `href`.\n    appendLink(_dataHref, relPrefetch, 'fetch'));\n  }\n\n  loadPage(route) {\n    return this.loadPageScript(route);\n  }\n\n  loadPageScript(route) {\n    route = normalizeRoute(route);\n    return new Promise((resolve, reject) => {\n      const fire = ({\n        error,\n        page,\n        mod\n      }) => {\n        this.pageRegisterEvents.off(route, fire);\n        delete this.loadingRoutes[route];\n\n        if (error) {\n          reject(error);\n        } else {\n          resolve({\n            page,\n            mod\n          });\n        }\n      }; // If there's a cached version of the page, let's use it.\n\n\n      const cachedPage = this.pageCache[route];\n\n      if (cachedPage) {\n        const error = cachedPage.error,\n              page = cachedPage.page,\n              mod = cachedPage.mod;\n        error ? reject(error) : resolve({\n          page,\n          mod\n        });\n        return;\n      } // Register a listener to get the page\n\n\n      this.pageRegisterEvents.on(route, fire); // If the page is loading via SSR, we need to wait for it\n      // rather downloading it again.\n\n      if (document.querySelector(\"script[data-next-page=\\\"\".concat(route, \"\\\"]\"))) {\n        return;\n      }\n\n      if (!this.loadingRoutes[route]) {\n        this.loadingRoutes[route] = true;\n\n        if (process.env.__NEXT_GRANULAR_CHUNKS) {\n          this.getDependencies(route).then(deps => {\n            deps.forEach(d => {\n              if (/\\.js$/.test(d) && !document.querySelector(\"script[src^=\\\"\".concat(d, \"\\\"]\"))) {\n                this.loadScript(d, route, false);\n              }\n\n              if (/\\.css$/.test(d) && !document.querySelector(\"link[rel=stylesheet][href^=\\\"\".concat(d, \"\\\"]\"))) {\n                appendLink(d, 'stylesheet').catch(() => {// FIXME: handle failure\n                  // Right now, this is needed to prevent an unhandled rejection.\n                });\n              }\n            });\n            this.loadRoute(route);\n          });\n        } else {\n          this.loadRoute(route);\n        }\n      }\n    });\n  }\n\n  loadRoute(route) {\n    route = normalizeRoute(route);\n    let scriptRoute = route === '/' ? '/index.js' : \"\".concat(route, \".js\");\n    const url = \"\".concat(this.assetPrefix, \"/_next/static/\").concat(encodeURIComponent(this.buildId), \"/pages\").concat(encodeURI(scriptRoute));\n    this.loadScript(url, route, true);\n  }\n\n  loadScript(url, route, isPage) {\n    const script = document.createElement('script');\n\n    if (process.env.__NEXT_MODERN_BUILD && hasNoModule) {\n      script.type = 'module'; // Only page bundle scripts need to have .module added to url,\n      // dependencies already have it added during build manifest creation\n\n      if (isPage) url = url.replace(/\\.js$/, '.module.js');\n    }\n\n    script.crossOrigin = process.crossOrigin;\n    script.src = url;\n\n    script.onerror = () => {\n      const error = new Error(\"Error loading script \".concat(url));\n      error.code = 'PAGE_LOAD_ERROR';\n      this.pageRegisterEvents.emit(route, {\n        error\n      });\n    };\n\n    document.body.appendChild(script);\n  } // This method if called by the route code.\n\n\n  registerPage(route, regFn) {\n    const register = () => {\n      try {\n        const mod = regFn();\n        const pageData = {\n          page: mod.default || mod,\n          mod\n        };\n        this.pageCache[route] = pageData;\n        this.pageRegisterEvents.emit(route, pageData);\n      } catch (error) {\n        this.pageCache[route] = {\n          error\n        };\n        this.pageRegisterEvents.emit(route, {\n          error\n        });\n      }\n    };\n\n    if (false) {\n      // Wait for webpack to become idle if it's not.\n      // More info: https://github.com/vercel/next.js/pull/1511\n      if (module.hot && module.hot.status() !== 'idle') {\n        console.log(\"Waiting for webpack to become \\\"idle\\\" to initialize the page: \\\"\".concat(route, \"\\\"\"));\n\n        const check = status => {\n          if (status === 'idle') {\n            module.hot.removeStatusHandler(check);\n            register();\n          }\n        };\n\n        module.hot.status(check);\n        return;\n      }\n    }\n\n    register();\n  }\n  /**\n  * @param {string} route\n  * @param {boolean} [isDependency]\n  */\n\n\n  prefetch(route, isDependency) {\n    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n    // License: Apache 2.0\n    let cn;\n\n    if (cn = navigator.connection) {\n      // Don't prefetch if using 2G or if Save-Data is enabled.\n      if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n    }\n    /** @type {string} */\n\n\n    let url;\n\n    if (isDependency) {\n      url = route;\n    } else {\n      route = normalizeRoute(route);\n      let scriptRoute = \"\".concat(route === '/' ? '/index' : route, \".js\");\n\n      if (process.env.__NEXT_MODERN_BUILD && hasNoModule) {\n        scriptRoute = scriptRoute.replace(/\\.js$/, '.module.js');\n      }\n\n      url = \"\".concat(this.assetPrefix, \"/_next/static/\").concat(encodeURIComponent(this.buildId), \"/pages\").concat(encodeURI(scriptRoute));\n    }\n\n    return Promise.all(document.querySelector(\"link[rel=\\\"\".concat(relPrefetch, \"\\\"][href^=\\\"\").concat(url, \"\\\"], script[data-next-page=\\\"\").concat(route, \"\\\"]\")) ? [] : [appendLink(url, relPrefetch, url.match(/\\.css$/) ? 'style' : 'script'), process.env.__NEXT_GRANULAR_CHUNKS && !isDependency && this.getDependencies(route).then(urls => Promise.all(urls.map(url => this.prefetch(url, true))))]).then( // do not return any data\n    () => {}, // swallow prefetch errors\n    () => {});\n  }\n\n}\n\nexports.default = PageLoader;","map":null,"metadata":{},"sourceType":"script"}