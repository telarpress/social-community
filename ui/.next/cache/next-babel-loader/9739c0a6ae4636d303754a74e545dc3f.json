{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nconst isServer = false;\n\nvar _default = () => {\n  const mountedInstances = new Set();\n  let state;\n\n  function emitChange(component) {\n    state = component.props.reduceComponentsToState([...mountedInstances], component.props);\n\n    if (component.props.handleStateChange) {\n      component.props.handleStateChange(state);\n    }\n  }\n\n  return class extends _react.Component {\n    // Used when server rendering\n    static rewind() {\n      const recordedState = state;\n      state = undefined;\n      mountedInstances.clear();\n      return recordedState;\n    }\n\n    constructor(props) {\n      super(props);\n\n      if (isServer) {\n        mountedInstances.add(this);\n        emitChange(this);\n      }\n    }\n\n    componentDidMount() {\n      mountedInstances.add(this);\n      emitChange(this);\n    }\n\n    componentDidUpdate() {\n      emitChange(this);\n    }\n\n    componentWillUnmount() {\n      mountedInstances.delete(this);\n      emitChange(this);\n    }\n\n    render() {\n      return null;\n    }\n\n  };\n};\n\nexports.default = _default;","map":{"version":3,"sources":["../../../next-server/lib/side-effect.tsx"],"names":["isServer","mountedInstances","state","component","Component","recordedState","constructor","emitChange","componentDidMount","componentDidUpdate","componentWillUnmount","render"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,MAAMA,QAAN,QAAA;;eAae,MAAM;AACnB,QAAMC,gBAA0B,GAAG,IAAnC,GAAmC,EAAnC;AACA,MAAA,KAAA;;AAEA,WAAA,UAAA,CAAA,SAAA,EAAuE;AACrEC,IAAAA,KAAK,GAAGC,SAAS,CAATA,KAAAA,CAAAA,uBAAAA,CACN,CAAC,GADKA,gBACN,CADMA,EAENA,SAAS,CAFXD,KAAQC,CAARD;;AAIA,QAAIC,SAAS,CAATA,KAAAA,CAAJ,iBAAA,EAAuC;AACrCA,MAAAA,SAAS,CAATA,KAAAA,CAAAA,iBAAAA,CAAAA,KAAAA;AAEH;AAED;;AAAA,SAAO,cAAcC,MAAAA,CAAAA,SAAd,CAAyC;AAC9C;AACA,WAAA,MAAA,GAAgB;AACd,YAAMC,aAAa,GAAnB,KAAA;AACAH,MAAAA,KAAK,GAALA,SAAAA;AACAD,MAAAA,gBAAgB,CAAhBA,KAAAA;AACA,aAAA,aAAA;AAGFK;;AAAAA,IAAAA,WAAW,CAAA,KAAA,EAAa;AACtB,YAAA,KAAA;;AACA,UAAA,QAAA,EAAc;AACZL,QAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,IAAAA;AACAM,QAAAA,UAAU,CAAVA,IAAU,CAAVA;AAEH;AACDC;;AAAAA,IAAAA,iBAAiB,GAAG;AAClBP,MAAAA,gBAAgB,CAAhBA,GAAAA,CAAAA,IAAAA;AACAM,MAAAA,UAAU,CAAVA,IAAU,CAAVA;AAEFE;;AAAAA,IAAAA,kBAAkB,GAAG;AACnBF,MAAAA,UAAU,CAAVA,IAAU,CAAVA;AAEFG;;AAAAA,IAAAA,oBAAoB,GAAG;AACrBT,MAAAA,gBAAgB,CAAhBA,MAAAA,CAAAA,IAAAA;AACAM,MAAAA,UAAU,CAAVA,IAAU,CAAVA;AAGFI;;AAAAA,IAAAA,MAAM,GAAG;AACP,aAAA,IAAA;AA7BJ;;AAAgD,GAAhD","sourcesContent":["import React, { Component } from 'react'\n\nconst isServer = typeof window === 'undefined'\n\ntype State = Array<React.ReactElement<any>> | undefined\n\ntype SideEffectProps = {\n  reduceComponentsToState: <T>(\n    components: Array<React.ReactElement<any>>,\n    props: T\n  ) => State\n  handleStateChange?: (state: State) => void\n  inAmpMode?: boolean\n}\n\nexport default () => {\n  const mountedInstances: Set<any> = new Set()\n  let state: State\n\n  function emitChange(component: React.Component<SideEffectProps>): void {\n    state = component.props.reduceComponentsToState(\n      [...mountedInstances],\n      component.props\n    )\n    if (component.props.handleStateChange) {\n      component.props.handleStateChange(state)\n    }\n  }\n\n  return class extends Component<SideEffectProps> {\n    // Used when server rendering\n    static rewind() {\n      const recordedState = state\n      state = undefined\n      mountedInstances.clear()\n      return recordedState\n    }\n\n    constructor(props: any) {\n      super(props)\n      if (isServer) {\n        mountedInstances.add(this)\n        emitChange(this)\n      }\n    }\n    componentDidMount() {\n      mountedInstances.add(this)\n      emitChange(this)\n    }\n    componentDidUpdate() {\n      emitChange(this)\n    }\n    componentWillUnmount() {\n      mountedInstances.delete(this)\n      emitChange(this)\n    }\n\n    render() {\n      return null\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}