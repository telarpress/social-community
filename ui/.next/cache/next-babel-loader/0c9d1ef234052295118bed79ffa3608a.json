{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"G:\\\\wamp64\\\\www\\\\react-social-network\\\\ui\\\\src\\\\containers\\\\config\\\\ConfigComponent.tsx\";\nvar __jsx = React.createElement;\n// - Import external components\nimport AppBar from '@material-ui/core/AppBar';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { withStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport NotificationIcon from '@material-ui/icons/Notifications';\nimport classNames from 'classnames';\nimport { push } from 'connected-react-router';\nimport React, { Component } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport config from 'config';\nimport * as authorizeActions from 'store/actions/authorizeActions';\nimport * as userSettingActions from 'store/actions/userSettingActions';\nimport NotificationSettingComponent from '../notificationSetting';\nimport { ConfigComponentType } from './configComponentType';\nimport { configStyles } from './configStyles';\n// - Material-UI\n// - Components\n// - Import actions\n// - Create Login component class\nexport class ConfigComponent extends Component {\n  /**\r\n   * Component constructor\r\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", (value, text) => {\n      this.setState({\n        selectedItem: value,\n        selectedText: text\n      });\n    });\n\n    _defineProperty(this, \"handleDrawerToggle\", () => {\n      this.setState({\n        mobileOpen: !this.state.mobileOpen\n      });\n    });\n\n    this.state = {\n      selectedItem: ConfigComponentType.Notification,\n      selectedText: '',\n      mobileOpen: false\n    };\n  }\n\n  componentDidMount() {\n    const getUserSetting = this.props.getUserSetting;\n    getUserSetting();\n  }\n  /**\r\n   * Reneder component DOM\r\n   */\n\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          t = _this$props.t,\n          homePage = _this$props.homePage,\n          theme = _this$props.theme,\n          userSetting = _this$props.userSetting;\n\n    const menuList = __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, __jsx(ListItem, {\n      button: true,\n      onClick: () => this.handleChange(ConfigComponentType.Notification, t('config.notificationLabel')),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, __jsx(ListItemIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, __jsx(NotificationIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    })), __jsx(ListItemText, {\n      primary: t('config.notificationLabel'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    })), __jsx(ListItem, {\n      button: true,\n      onClick: () => {\n        homePage();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, __jsx(ListItemIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, __jsx(HomeIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    })), __jsx(ListItemText, {\n      primary: t('config.homeLabel'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })));\n\n    const _this$state = this.state,\n          selectedItem = _this$state.selectedItem,\n          selectedText = _this$state.selectedText;\n\n    const drawer = __jsx(Drawer, {\n      variant: \"permanent\",\n      classes: {\n        paper: classes.drawerPaper\n      },\n      anchor: 'left',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: classes.toolbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, __jsx(\"img\", {\n      src: config.settings.logoHead,\n      alt: config.settings.appName,\n      className: classes.logo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    })), __jsx(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), __jsx(List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, menuList));\n\n    return __jsx(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, __jsx(AppBar, {\n      className: classes.appBar,\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, __jsx(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, __jsx(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open drawer\",\n      onClick: this.handleDrawerToggle,\n      className: classes.navIconHide,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, __jsx(MenuIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    })), __jsx(Typography, {\n      variant: \"h6\",\n      color: \"inherit\",\n      noWrap: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, selectedItem === ConfigComponentType.ChangePassword ? t('config.changePasswordLabel') : selectedText))), __jsx(Hidden, {\n      mdUp: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, __jsx(Drawer, {\n      variant: \"temporary\",\n      anchor: theme.direction === 'rtl' ? 'right' : 'left',\n      open: this.state.mobileOpen,\n      onClose: this.handleDrawerToggle,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      ModalProps: {\n        keepMounted: true // Better open performance on mobile.\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, drawer)), __jsx(Hidden, {\n      smDown: true,\n      implementation: \"css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, __jsx(Drawer, {\n      variant: \"permanent\",\n      open: true,\n      classes: {\n        paper: classes.drawerPaper,\n        root: classes.rootDawer\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, drawer)), __jsx(\"main\", {\n      className: classNames(classes.content, classes.fullBox),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: classes.toolbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      className: classNames(classes.container, classes.fullBox),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      style: {\n        height: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }), selectedItem === ConfigComponentType.Notification ? __jsx(NotificationSettingComponent, {\n      userSetting: userSetting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 68\n      }\n    }) : __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 130\n      }\n    }))));\n  }\n\n}\n/**\r\n * Map dispatch to props\r\n */\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    login: (email, password) => {\n      dispatch(authorizeActions.dbLogin(email, password));\n    },\n    getUserSetting: () => dispatch(userSettingActions.dbFetchUserSetting()),\n    loginWithOAuth: type => dispatch(authorizeActions.dbLoginWithOAuth(type)),\n    homePage: () => {\n      dispatch(push('/'));\n    }\n  };\n};\n/**\r\n * Map state to props\r\n */\n\n\nconst mapStateToProps = state => {\n  return {\n    userSetting: state.get('userSetting')\n  };\n}; // - Connect component to redux store\n\n\nconst translateWrapper = withTranslation('translations')(ConfigComponent);\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(configStyles, {\n  withTheme: true\n})(translateWrapper)));","map":{"version":3,"sources":["G:/wamp64/www/react-social-network/ui/src/containers/config/ConfigComponent.tsx"],"names":["AppBar","Divider","Drawer","Hidden","IconButton","List","ListItem","ListItemIcon","ListItemText","withStyles","Toolbar","Typography","HomeIcon","MenuIcon","NotificationIcon","classNames","push","React","Component","withTranslation","connect","withRouter","config","authorizeActions","userSettingActions","NotificationSettingComponent","ConfigComponentType","configStyles","ConfigComponent","constructor","props","value","text","setState","selectedItem","selectedText","mobileOpen","state","Notification","componentDidMount","getUserSetting","render","classes","t","homePage","theme","userSetting","menuList","handleChange","drawer","paper","drawerPaper","toolbar","settings","logoHead","appName","logo","root","appBar","handleDrawerToggle","navIconHide","ChangePassword","direction","keepMounted","rootDawer","content","fullBox","container","height","mapDispatchToProps","dispatch","ownProps","login","email","password","dbLogin","dbFetchUserSetting","loginWithOAuth","type","dbLoginWithOAuth","mapStateToProps","get","translateWrapper","withTheme"],"mappings":"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","sourcesContent":["// - Import external components\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport NotificationIcon from '@material-ui/icons/Notifications';\r\nimport classNames from 'classnames';\r\nimport { push } from 'connected-react-router';\r\nimport { Map } from 'immutable';\r\nimport React, { Component } from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport config from 'config';\r\nimport { OAuthType } from 'core/domain/authorize';\r\nimport * as authorizeActions from 'store/actions/authorizeActions';\r\nimport * as userSettingActions from 'store/actions/userSettingActions';\r\n\r\nimport NotificationSettingComponent from '../notificationSetting';\r\nimport { ConfigComponentType } from './configComponentType';\r\nimport { configStyles } from './configStyles';\r\nimport { IConfigProps } from './IConfigProps';\r\nimport { IConfigState } from './IConfigState';\r\n\r\n// - Material-UI\r\n// - Components\r\n// - Import actions\r\n// - Create Login component class\r\nexport class ConfigComponent extends Component<IConfigProps, IConfigState> {\r\n\r\n  /**\r\n   * Component constructor\r\n   */\r\n  constructor(props: IConfigProps) {\r\n    super(props)\r\n    this.state = {\r\n      selectedItem: ConfigComponentType.Notification,\r\n      selectedText: '',\r\n      mobileOpen: false\r\n    }\r\n  }\r\n\r\n  handleChange = (value: number, text: string) => {\r\n    this.setState({\r\n      selectedItem: value,\r\n      selectedText: text,\r\n    })\r\n  }\r\n\r\n  handleDrawerToggle = () => {\r\n    this.setState({ mobileOpen: !this.state.mobileOpen })\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {getUserSetting} = this.props\r\n    getUserSetting!()\r\n  }\r\n\r\n  /**\r\n   * Reneder component DOM\r\n   */\r\n  render() {\r\n    const { classes, t, homePage, theme, userSetting } = this.props\r\n    const menuList = (\r\n      <div>\r\n        <ListItem button onClick={() => this.handleChange(ConfigComponentType.Notification, t!('config.notificationLabel'))}>\r\n          <ListItemIcon>\r\n            <NotificationIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary={t!('config.notificationLabel')} />\r\n        </ListItem>\r\n        <ListItem button onClick={() => { homePage!() }} >\r\n          <ListItemIcon>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary={t!('config.homeLabel')} />\r\n        </ListItem>\r\n      </div>\r\n    )\r\n\r\n    const { selectedItem, selectedText } = this.state\r\n\r\n    const drawer = (\r\n      <Drawer\r\n        variant='permanent'\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor={'left'}\r\n      >\r\n        <div className={classes.toolbar} >\r\n        <img src={config.settings.logoHead} alt={config.settings.appName} className={classes.logo}/>\r\n        </div>\r\n        <Divider />\r\n        <List>{menuList}</List>\r\n      </Drawer>\r\n    )\r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar className={classes.appBar} color='secondary'>\r\n          <Toolbar>\r\n            <IconButton\r\n              color='inherit'\r\n              aria-label='open drawer'\r\n              onClick={this.handleDrawerToggle}\r\n              className={classes.navIconHide}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant='h6' color='inherit' noWrap>\r\n                {selectedItem === ConfigComponentType.ChangePassword ? t!('config.changePasswordLabel') : selectedText}\r\n              </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Hidden mdUp>\r\n          <Drawer\r\n            variant='temporary'\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={this.state.mobileOpen}\r\n            onClose={this.handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n        \r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden smDown implementation='css'>\r\n          <Drawer\r\n            variant='permanent'\r\n            open\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n              root: classes.rootDawer\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <main className={classNames(classes.content, classes.fullBox)}>\r\n          <div className={classes.toolbar} />\r\n            <div className={classNames(classes.container, classes.fullBox)}>\r\n            <div style={{height: 30}}></div>\r\n              {selectedItem === ConfigComponentType.Notification ? <NotificationSettingComponent userSetting={userSetting!} /> : <div></div>}\r\n            </div>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Map dispatch to props\r\n */\r\nconst mapDispatchToProps = (dispatch: any, ownProps: IConfigProps) => {\r\n  return {\r\n    login: (email: string, password: string) => {\r\n      dispatch(authorizeActions.dbLogin(email, password))\r\n    },\r\n    getUserSetting: () => dispatch(userSettingActions.dbFetchUserSetting()),\r\n    loginWithOAuth: (type: OAuthType) => dispatch(authorizeActions.dbLoginWithOAuth(type)),\r\n    homePage: () => {\r\n      dispatch(push('/'))\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Map state to props\r\n */\r\nconst mapStateToProps = (state: Map<string, any>) => {\r\n  return {\r\n    \r\n    userSetting: state.get('userSetting')\r\n  }\r\n}\r\n\r\n// - Connect component to redux store\r\nconst translateWrapper = withTranslation('translations')(ConfigComponent as any)\r\n\r\nexport default withRouter<any, any>(connect(mapStateToProps, mapDispatchToProps)(withStyles(configStyles as any, { withTheme: true })(translateWrapper as any) as any))\r\n"]},"metadata":{},"sourceType":"module"}