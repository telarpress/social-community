{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { AuthAPI } from 'api/AuthAPI';\nimport { push } from 'connected-react-router';\nimport { AuthorizeActionType } from 'constants/authorizeActionType';\nimport { SocialError } from 'core/domain/common';\nimport { SocialProviderTypes } from 'core/socialProviderTypes';\nimport { Map } from 'immutable';\nimport { provider } from '../../socialEngine';\nimport * as globalActions from 'store/actions/globalActions';\nimport * as serverActions from 'store/actions/serverActions';\nimport { ServerRequestStatusType } from 'store/actions/serverRequestStatusType';\nimport config from 'config'; // - Import react components\n// -Import domain\n// - Import action types\n// - Import services\n// - Import actions\n\n/* _____________ CRUD State _____________ */\n\n/**\r\n * Loing user\r\n */\n\nexport const login = user => {\n  return {\n    type: AuthorizeActionType.LOGIN,\n    payload: Map(user)\n  };\n};\n/**\r\n * Fetch user registeration token\r\n */\n\nexport const fetchUserRegisterToken = (user, captchaVerifier) => {\n  return {\n    type: AuthorizeActionType.ASYNC_FETCH_USER_REGISTER_TOKEN,\n    payload: {\n      user,\n      captchaVerifier\n    }\n  };\n};\n/**\r\n * Fetch access token\r\n */\n\nexport const fetchAccessToken = () => {\n  return {\n    type: AuthorizeActionType.ASYNC_FETCH_ACCESS_TOKEN,\n    payload: {}\n  };\n};\n/**\r\n * Set user registeration token\r\n */\n\nexport const setUserRegisterToken = token => {\n  return {\n    type: AuthorizeActionType.SET_USER_REGISTER_TOKEN,\n    payload: {\n      token\n    }\n  };\n};\n/**\r\n * Set access token\r\n */\n\nexport const setAccessToken = token => {\n  return {\n    type: AuthorizeActionType.SET_ACCESS_TOKEN,\n    payload: {\n      token\n    }\n  };\n};\n/**\r\n * Async set user login status\r\n */\n\nexport const asyncSetUserLoginStatus = () => {\n  return {\n    type: AuthorizeActionType.ASYNC_SET_LOGIN,\n    payload: {}\n  };\n};\n/**\r\n * Set user login status\r\n */\n\nexport const setUserLoginStatus = status => {\n  return {\n    type: AuthorizeActionType.SET_LOGIN,\n    payload: {\n      status\n    }\n  };\n};\n/**\r\n * Verify user registeration code\r\n */\n\nexport const asyncVerifyUserRegisterCode = code => {\n  return {\n    type: AuthorizeActionType.ASYNC_VERITY_USER_REGISTER_CODE,\n    payload: {\n      code\n    }\n  };\n};\n/**\r\n * Logout user\r\n */\n\nexport const logout = () => {\n  return {\n    type: AuthorizeActionType.LOGOUT\n  };\n};\n/**\r\n * User registeration call\r\n * @param user  for registering\r\n */\n\nexport const signup = user => {\n  return {\n    type: AuthorizeActionType.SIGNUP,\n    payload: _objectSpread({}, user)\n  };\n};\n/**\r\n * Update user's password\r\n */\n\nexport const updatePassword = () => {\n  return {\n    type: AuthorizeActionType.UPDATE_PASSWORD\n  };\n};\n/**\r\n * Set signup component step\r\n */\n\nexport const setSignupStep = step => {\n  return {\n    type: AuthorizeActionType.SET_SIGNUP_STEP,\n    payload: {\n      step\n    }\n  };\n};\n/**\r\n * Subscribe authorize state change\r\n */\n\nexport const subcribeAuthorizeStateChange = () => {\n  return {\n    type: AuthorizeActionType.SUBSCRIBE_AUTH_STATE_CHANGE\n  };\n};\n/**\r\n * Get service providers\r\n */\n\nconst authorizeService = provider.get(SocialProviderTypes.AuthorizeService);\n/* _____________ CRUD DB _____________ */\n\n/**\r\n * Log in user in server\r\n */\n\nexport const dbLogin = (email, password) => {\n  return (dispatch, getState) => {\n    let loginRequest = AuthAPI.createLoginRequest(email);\n    dispatch(serverActions.sendRequest(loginRequest));\n    dispatch(globalActions.showNotificationRequest());\n    return authorizeService.login(email, password).then(result => {\n      if (!result) {\n        throw new SocialError('authService/loginuser/null', 'Login was not successful');\n      }\n\n      loginRequest.status = ServerRequestStatusType.OK;\n      dispatch(serverActions.sendRequest(loginRequest));\n      dispatch(globalActions.showNotificationSuccess());\n      dispatch(login(result));\n      dispatch(push('/'));\n    }, error => {\n      loginRequest.status = ServerRequestStatusType.Error;\n      dispatch(serverActions.sendRequest(loginRequest));\n      dispatch(globalActions.showMessage(error.message));\n    });\n  };\n};\n/**\r\n * Log out user in server\r\n */\n\nexport const dbLogout = () => {\n  return (dispatch, getState) => {\n    authorizeService.logout();\n    localStorage.removeItem('red-gold.scure.token');\n    dispatch(logout());\n    window.location.href = config.settings.gateway + '/auth/login';\n  };\n};\n/**\r\n * Send email verification\r\n */\n\nexport const dbSendEmailVerfication = value => {\n  return (dispatch, getState) => {\n    dispatch(globalActions.showNotificationRequest());\n    return authorizeService.sendEmailVerification(value).then(() => {\n      // Send email verification successful.\n      dispatch(globalActions.showNotificationSuccess());\n      dispatch(push('/'));\n    }).catch(error => {\n      // An error happened.\n      dispatch(globalActions.showMessage(error.code));\n    });\n  };\n};\n/**\r\n * Change user's password\r\n * @param {string} newPassword\r\n */\n\nexport const dbUpdatePassword = (newPassword, confirmPassword) => {\n  return (dispatch, getState) => {\n    dispatch(globalActions.showNotificationRequest());\n    return authorizeService.updatePassword(newPassword, confirmPassword).then(() => {\n      // Update successful.\n      dispatch(globalActions.showNotificationSuccess());\n      dispatch(updatePassword());\n      dispatch(dbLogout());\n    }).catch(error => {\n      // An error happened.\n      switch (error.code) {\n        case 'auth/requires-recent-login':\n          dispatch(globalActions.showMessage(error.code));\n          dispatch(dbLogout());\n          break;\n\n        default:\n      }\n    });\n  };\n};\n/**\r\n * Reset user's password\r\n * @param {string} newPassword\r\n */\n\nexport const dbResetPassword = email => {\n  return (dispatch, getState) => {\n    dispatch(globalActions.showNotificationRequest());\n    return authorizeService.resetPassword(email).then(() => {\n      // Reset password successful.\n      dispatch(globalActions.showNotificationSuccess());\n      dispatch(push('/login'));\n    }).catch(error => {\n      // An error happened.\n      dispatch(globalActions.showMessage(error.code));\n    });\n  };\n};\n/**\r\n * Login user with OAuth\r\n */\n\nexport const dbLoginWithOAuth = type => {\n  return (dispatch, getState) => {\n    dispatch(globalActions.showNotificationRequest());\n    return authorizeService.loginWithOAuth(type).then(result => {\n      // Send email verification successful.\n      dispatch(globalActions.showNotificationSuccess());\n      dispatch(login(result));\n      dispatch(push('/'));\n    }).catch(error => {\n      // An error happened.\n      dispatch(globalActions.showMessage(error.code));\n    });\n  };\n};","map":{"version":3,"sources":["G:/wamp64/www/react-social-network/ui/src/store/actions/authorizeActions.ts"],"names":["AuthAPI","push","AuthorizeActionType","SocialError","SocialProviderTypes","Map","provider","globalActions","serverActions","ServerRequestStatusType","config","login","user","type","LOGIN","payload","fetchUserRegisterToken","captchaVerifier","ASYNC_FETCH_USER_REGISTER_TOKEN","fetchAccessToken","ASYNC_FETCH_ACCESS_TOKEN","setUserRegisterToken","token","SET_USER_REGISTER_TOKEN","setAccessToken","SET_ACCESS_TOKEN","asyncSetUserLoginStatus","ASYNC_SET_LOGIN","setUserLoginStatus","status","SET_LOGIN","asyncVerifyUserRegisterCode","code","ASYNC_VERITY_USER_REGISTER_CODE","logout","LOGOUT","signup","SIGNUP","updatePassword","UPDATE_PASSWORD","setSignupStep","step","SET_SIGNUP_STEP","subcribeAuthorizeStateChange","SUBSCRIBE_AUTH_STATE_CHANGE","authorizeService","get","AuthorizeService","dbLogin","email","password","dispatch","getState","loginRequest","createLoginRequest","sendRequest","showNotificationRequest","then","result","OK","showNotificationSuccess","error","Error","showMessage","message","dbLogout","localStorage","removeItem","window","location","href","settings","gateway","dbSendEmailVerfication","value","sendEmailVerification","catch","dbUpdatePassword","newPassword","confirmPassword","dbResetPassword","resetPassword","dbLoginWithOAuth","loginWithOAuth"],"mappings":"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","sourcesContent":["import { AuthAPI } from 'api/AuthAPI';\r\nimport { push } from 'connected-react-router';\r\nimport { AuthorizeActionType } from 'constants/authorizeActionType';\r\nimport { LoginUser, OAuthType } from 'core/domain/authorize';\r\nimport { SocialError } from 'core/domain/common';\r\nimport { IAuthorizeService } from 'core/services/authorize';\r\nimport { SocialProviderTypes } from 'core/socialProviderTypes';\r\nimport { Map } from 'immutable';\r\nimport { UserRegisterModel } from 'models/users/userRegisterModel';\r\nimport { SignupStepEnum } from 'models/authorize/signupStepEnum';\r\nimport { provider } from '../../socialEngine';\r\nimport * as globalActions from 'store/actions/globalActions';\r\nimport * as serverActions from 'store/actions/serverActions';\r\nimport { ServerRequestStatusType } from 'store/actions/serverRequestStatusType';\r\nimport config from 'config';\r\n\r\n\r\n// - Import react components\r\n// -Import domain\r\n// - Import action types\r\n// - Import services\r\n// - Import actions\r\n/* _____________ CRUD State _____________ */\r\n\r\n/**\r\n * Loing user\r\n */\r\nexport const login = (user: LoginUser) => {\r\n  return {\r\n    type: AuthorizeActionType.LOGIN,\r\n    payload: Map(user as any)\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch user registeration token\r\n */\r\nexport const fetchUserRegisterToken = (user: UserRegisterModel, captchaVerifier: string) => {\r\n  return {\r\n    type: AuthorizeActionType.ASYNC_FETCH_USER_REGISTER_TOKEN,\r\n    payload: {user, captchaVerifier}\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch access token\r\n */\r\nexport const fetchAccessToken = () => {\r\n  return {\r\n    type: AuthorizeActionType.ASYNC_FETCH_ACCESS_TOKEN,\r\n    payload: {}\r\n  }\r\n}\r\n\r\n/**\r\n * Set user registeration token\r\n */\r\nexport const setUserRegisterToken = (token: string) => {\r\n  return {\r\n    type: AuthorizeActionType.SET_USER_REGISTER_TOKEN,\r\n    payload: {token}\r\n  }\r\n}\r\n\r\n/**\r\n * Set access token\r\n */\r\nexport const setAccessToken = (token: string) => {\r\n  return {\r\n    type: AuthorizeActionType.SET_ACCESS_TOKEN,\r\n    payload: {token}\r\n  }\r\n}\r\n\r\n/**\r\n * Async set user login status\r\n */\r\nexport const asyncSetUserLoginStatus = () => {\r\n  return {\r\n    type: AuthorizeActionType.ASYNC_SET_LOGIN,\r\n    payload: {}\r\n  }\r\n}\r\n\r\n/**\r\n * Set user login status\r\n */\r\nexport const setUserLoginStatus = (status: boolean) => {\r\n  return {\r\n    type: AuthorizeActionType.SET_LOGIN,\r\n    payload: {status}\r\n  }\r\n}\r\n\r\n/**\r\n * Verify user registeration code\r\n */\r\nexport const asyncVerifyUserRegisterCode = (code: string) => {\r\n  return {\r\n    type: AuthorizeActionType.ASYNC_VERITY_USER_REGISTER_CODE,\r\n    payload: {code}\r\n  }\r\n}\r\n\r\n/**\r\n * Logout user\r\n */\r\nexport const logout = () => {\r\n  return { type: AuthorizeActionType.LOGOUT }\r\n}\r\n\r\n/**\r\n * User registeration call\r\n * @param user  for registering\r\n */\r\nexport const signup = (user: UserRegisterModel) => {\r\n  return {\r\n    type: AuthorizeActionType.SIGNUP,\r\n    payload: { ...user }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Update user's password\r\n */\r\nexport const updatePassword = () => {\r\n  return { type: AuthorizeActionType.UPDATE_PASSWORD}\r\n}\r\n\r\n/**\r\n * Set signup component step\r\n */\r\nexport const setSignupStep = (step: SignupStepEnum ) => {\r\n  return { \r\n    type: AuthorizeActionType.SET_SIGNUP_STEP,\r\n    payload: {step}\r\n  }\r\n}\r\n\r\n/**\r\n * Subscribe authorize state change\r\n */\r\nexport const subcribeAuthorizeStateChange = () => {\r\n  return { type: AuthorizeActionType.SUBSCRIBE_AUTH_STATE_CHANGE}\r\n}\r\n\r\n/**\r\n * Get service providers\r\n */\r\nconst authorizeService: IAuthorizeService = provider.get<IAuthorizeService>(SocialProviderTypes.AuthorizeService)\r\n\r\n/* _____________ CRUD DB _____________ */\r\n\r\n/**\r\n * Log in user in server\r\n */\r\nexport const dbLogin = (email: string, password: string) => {\r\n  return (dispatch: any, getState: any) => {\r\n\r\n    let loginRequest =  AuthAPI.createLoginRequest(email)\r\n    dispatch(serverActions.sendRequest(loginRequest))\r\n\r\n    dispatch(globalActions.showNotificationRequest())\r\n\r\n    return authorizeService.login(email, password).then((result) => {\r\n\r\n      if (!result) {\r\n        throw new SocialError('authService/loginuser/null', 'Login was not successful')\r\n      }\r\n\r\n      loginRequest.status = ServerRequestStatusType.OK\r\n      dispatch(serverActions.sendRequest(loginRequest))\r\n\r\n      dispatch(globalActions.showNotificationSuccess())\r\n      dispatch(login(result!))\r\n      dispatch(push('/'))\r\n    }, (error: SocialError) => {\r\n      loginRequest.status = ServerRequestStatusType.Error\r\n      dispatch(serverActions.sendRequest(loginRequest))\r\n      dispatch(globalActions.showMessage(error.message))\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Log out user in server\r\n */\r\nexport const dbLogout = () => {\r\n  return (dispatch: any, getState: any) => {\r\n      authorizeService.logout()\r\n      localStorage.removeItem('red-gold.scure.token')\r\n      dispatch(logout())\r\n      window.location.href = config.settings.gateway+'/auth/login'\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Send email verification\r\n */\r\nexport const dbSendEmailVerfication = (value: any) => {\r\n  return (dispatch: any, getState: any) => {\r\n    dispatch(globalActions.showNotificationRequest())\r\n\r\n    return authorizeService.sendEmailVerification(value).then(() => {\r\n      // Send email verification successful.\r\n      dispatch(globalActions.showNotificationSuccess())\r\n      dispatch(push('/'))\r\n    })\r\n      .catch((error: SocialError) => {\r\n        // An error happened.\r\n        dispatch(globalActions.showMessage(error.code))\r\n\r\n      })\r\n  }\r\n}\r\n\r\n/**\r\n * Change user's password\r\n * @param {string} newPassword\r\n */\r\nexport const dbUpdatePassword = (newPassword: string, confirmPassword: string) => {\r\n  return (dispatch: any, getState: any) => {\r\n    dispatch(globalActions.showNotificationRequest())\r\n    \r\n    return authorizeService.updatePassword(newPassword, confirmPassword).then(() => {\r\n\r\n      // Update successful.\r\n      dispatch(globalActions.showNotificationSuccess())\r\n      dispatch(updatePassword())\r\n      dispatch(dbLogout())\r\n    })\r\n      .catch((error: SocialError) => {\r\n        // An error happened.\r\n        switch (error.code) {\r\n          case 'auth/requires-recent-login':\r\n            dispatch(globalActions.showMessage(error.code))\r\n            dispatch(dbLogout())\r\n            break\r\n          default:\r\n\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\n/**\r\n * Reset user's password\r\n * @param {string} newPassword\r\n */\r\nexport const dbResetPassword = (email: string) => {\r\n  return (dispatch: any, getState: any) => {\r\n    dispatch(globalActions.showNotificationRequest())\r\n\r\n    return authorizeService.resetPassword(email).then(() => {\r\n\r\n      // Reset password successful.\r\n      dispatch(globalActions.showNotificationSuccess())\r\n      dispatch(push('/login'))\r\n    })\r\n      .catch((error: SocialError) => {\r\n        // An error happened.\r\n        dispatch(globalActions.showMessage(error.code))\r\n\r\n      })\r\n  }\r\n}\r\n\r\n/**\r\n * Login user with OAuth\r\n */\r\nexport const dbLoginWithOAuth = (type: OAuthType) => {\r\n  return (dispatch: any, getState: any) => {\r\n    dispatch(globalActions.showNotificationRequest())\r\n\r\n    return authorizeService.loginWithOAuth(type).then((result: LoginUser) => {\r\n      // Send email verification successful.\r\n      dispatch(globalActions.showNotificationSuccess())\r\n      dispatch(login(result))\r\n      dispatch(push('/'))\r\n    })\r\n      .catch((error: SocialError) => {\r\n        // An error happened.\r\n        dispatch(globalActions.showMessage(error.code))\r\n\r\n      })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}